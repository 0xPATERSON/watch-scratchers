// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.10;

import "ds-test/test.sol";
import "../WatchScratchersLibrary.sol";

contract WatchScratchersLibraryTest is DSTest {
    // color replace helper test
    function testColorReplaceHappyTrailing() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("hiAAAAAAA", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "hiBBBBBBB";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceHappyStarting() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("AAAAAAAhi", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "BBBBBBBhi";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceHappyOnly() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("AAAAAAA", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "BBBBBBB";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceHappyRealistic() public {
        string memory test = '<rect width="91" height="117" transform="matrix(1 0 0 -1 182 681)" fill="XXXXXXX"/>';
        string memory actualOutput = WatchScratchersLibrary._colorReplace(test, "XXXXXXX", "#FAFAFA");
        string memory expectedOutput = '<rect width="91" height="117" transform="matrix(1 0 0 -1 182 681)" fill="#FAFAFA"/>';
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceHappyMultiple() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("AAAAAAABBBBBAAAAAAA", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "BBBBBBBBBBBBBBBBBBB";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceNone() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("AAAABBB", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "AAAABBB";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceHappyNoneShort() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("AAAA", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "AAAA";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testColorReplaceHappyNoneEmptyString() public {
        string memory actualOutput = WatchScratchersLibrary._colorReplace("", "AAAAAAA", "BBBBBBB");
        string memory expectedOutput = "";
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }
    // render hands test
    function testRDressHands() public {
        string memory actualOutput = WatchScratchersLibrary._renderHands("0 0 2500 2500", "158.1", "309.7", "#B2B2B2", "#B2B2B2", "#E8E8E8", 150, 342, 57, WatchScratchersLibrary.HandTypes.R_DRESS);
        // emit log(actualOutput);
        string memory expectedOutput = '<svg class="dial" viewBox="0 0 2500 2500" x="158.1" y="309.7"> <style>g, line, circle { --color-accent: #B2B2B2; --color-hand-outer: #B2B2B2; --color-hand-inner: #E8E8E8; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-hand-outer); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 4px; color: var(--color-hand-outer); } .hand-inner { stroke-width: 2px; color: var(--color-hand-inner); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(57deg); -moz-transform: rotate(57deg); -ms-transform: rotate(57deg); -o-transform: rotate(57deg); transform: rotate(57deg); } to { -webkit-transform: rotate(417deg); -moz-transform: rotate(417deg); -ms-transform: rotate(417deg); -o-transform: rotate(417deg); transform: rotate(417deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" y1="25" x2="50" y2="60"></line> <line class="hand-inner" x1="50" y1="28" x2="50" y2="40"></line> </g> <g class="hand minute-hand"> <line class="hand-outer" x1="50" y1="15" x2="50" y2="60"></line> <line class="hand-inner" x1="50" y1="18" x2="50" y2="40"></line> </g> <circle class="circle" cx="50" cy="50" r="3"></circle> <g class="hand second-hand"> <line x1="50" y1="10" x2="50" y2="65"></line> <circle cx="50" cy="50" r="3"></circle> </g> </g> </svg> ';
        bytes memory actualBytes = bytes(actualOutput);
        bytes memory expectedBytes = bytes(expectedOutput);
        assertEq(actualBytes.length, expectedBytes.length);
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testRoundHands() public {
        string memory actualOutput = WatchScratchersLibrary._renderHands("0 0 2500 2500", "158.1", "309.7", "#B2B2B2", "#B2B2B2", "#E8E8E8", 150, 342, 57, WatchScratchersLibrary.HandTypes.ROUND);
        // emit log(actualOutput);
        string memory expectedOutput = '<svg class="dial" viewBox="0 0 2500 2500" x="158.1" y="309.7"> <style>g, line, circle { --color-accent: #B2B2B2; --color-hand-outer: #B2B2B2; --color-hand-inner: #E8E8E8; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-accent); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; stroke-linecap: round; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 4px; color: var(--color-hand-outer); } .hand-inner { stroke-width: 2px; color: var(--color-hand-inner); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(57deg); -moz-transform: rotate(57deg); -ms-transform: rotate(57deg); -o-transform: rotate(57deg); transform: rotate(57deg); } to { -webkit-transform: rotate(417deg); -moz-transform: rotate(417deg); -ms-transform: rotate(417deg); -o-transform: rotate(417deg); transform: rotate(417deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" x2="50" y1="25" y2="50"/> <line class="hand-inner" x1="50" x2="50" y1="25" y2="50"/> </g> <g class="hand minute-hand"> <line class="hand hand-outer" x1="50" x2="50" y1="15" y2="50"/> <line class="hand-inner" x1="50" x2="50" y1="15" y2="50"/> </g> <circle class="circle" cx="50" cy="50" r="3"/> <g class="hand second-hand"> <line x1="50" x2="50" y1="10" y2="65"/> <circle cx="50" cy="50" r="1.5"/> </g> </g> </svg> ';
        bytes memory actualBytes = bytes(actualOutput);
        bytes memory expectedBytes = bytes(expectedOutput);
        assertEq(actualBytes.length, expectedBytes.length);
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    function testSportHands() public {
        string memory actualOutput = WatchScratchersLibrary._renderHands("0 0 2500 2500", "158.1", "309.7", "#B2B2B2", "#B2B2B2", "#E8E8E8", 150, 342, 57, WatchScratchersLibrary.HandTypes.SPORT);
        // emit log(actualOutput);
        string memory expectedOutput = '<svg class="dial" viewBox="0 0 2500 2500" x="158.1" y="309.7"> <style>g, line, circle { --color-accent: #B2B2B2; --color-hand-outer: #B2B2B2; --color-hand-inner: #E8E8E8; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-accent); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 4px; color: var(--color-hand-outer); } .hand-inner { stroke-width: 2px; color: var(--color-hand-inner); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(57deg); -moz-transform: rotate(57deg); -ms-transform: rotate(57deg); -o-transform: rotate(57deg); transform: rotate(57deg); } to { -webkit-transform: rotate(417deg); -moz-transform: rotate(417deg); -ms-transform: rotate(417deg); -o-transform: rotate(417deg); transform: rotate(417deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" x2="50" y1="25" y2="50"/> <circle class="hand-outer" cx="50" cy="33" r="5"/> <line class="hand-inner" x1="50" x2="50" y1="27" y2="50"/> <circle class="hand-inner" cx="50" cy="33" r="3.5"/> </g> <g class="hand minute-hand"> <line class="hand-outer" x1="50" x2="50" y1="15" y2="50"/> <line class="hand-inner" x1="50" x2="50" y1="17" y2="50"/> </g> <circle class="circle" cx="50" cy="50" r="3"/> <g class="hand second-hand"> <line x1="50" x2="50" y1="10" y2="65"/> <circle cx="50" cy="65" r="2"/> <circle cx="50" cy="20" r="3"/> <circle class="hand-inner" cx="50" cy="20" r="1.5"/> </g> </g> </svg> ';
        bytes memory actualBytes = bytes(actualOutput);
        bytes memory expectedBytes = bytes(expectedOutput);
        assertEq(actualBytes.length, expectedBytes.length);
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    // render hands test
    function testODressHands() public {
        string memory actualOutput = WatchScratchersLibrary._renderHands("0 0 2500 2500", "158.1", "309.7", "#B2B2B2", "#B2B2B2", "#E8E8E8", 150, 342, 57, WatchScratchersLibrary.HandTypes.O_DRESS);
        // emit log(actualOutput);
        string memory expectedOutput = '<svg class="dial" viewBox="0 0 2500 2500" x="158.1" y="309.7"> <style>g, line, circle { --color-accent: #B2B2B2; --color-hand-outer: #B2B2B2; --color-hand-inner: #E8E8E8; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-hand-outer); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 4px; color: var(--color-hand-outer); } .hand-inner { stroke-width: 2px; color: var(--color-hand-inner); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(57deg); -moz-transform: rotate(57deg); -ms-transform: rotate(57deg); -o-transform: rotate(57deg); transform: rotate(57deg); } to { -webkit-transform: rotate(417deg); -moz-transform: rotate(417deg); -ms-transform: rotate(417deg); -o-transform: rotate(417deg); transform: rotate(417deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" x2="50" y1="25" y2="50"/> <line class="hand-inner" x1="50" x2="50" y1="27" y2="48"/> </g> <g class="hand minute-hand"> <line class="hand-outer" x1="50" x2="50" y1="15" y2="50"/> <line class="hand-inner" x1="50" x2="50" y1="17" y2="48"/> </g> <circle class="circle" cx="50" cy="50" r="3"/> <g class="hand second-hand"> <line x1="50" x2="50" y1="10" y2="65"/> <circle cx="50" cy="50" r="3"/> </g> </g> </svg> ';
        bytes memory actualBytes = bytes(actualOutput);
        bytes memory expectedBytes = bytes(expectedOutput);
        assertEq(actualBytes.length, expectedBytes.length);
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    // render hands test
    function testSenatorHands() public {
        string memory actualOutput = WatchScratchersLibrary._renderHands("0 0 2500 2500", "158.1", "309.7", "#0056A5", "#0056A5", "#0056A5", 150, 342, 57, WatchScratchersLibrary.HandTypes.SENATOR);
        // emit log(actualOutput);
        string memory expectedOutput = '<svg class="dial" viewBox="0 0 2500 2500" x="158.1" y="309.7"> <style>g, line, circle { --color-accent: #0056A5; --color-hand-outer: #0056A5; --color-hand-inner: #0056A5; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-hand-outer); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 3px; color: var(--color-hand-outer); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(57deg); -moz-transform: rotate(57deg); -ms-transform: rotate(57deg); -o-transform: rotate(57deg); transform: rotate(57deg); } to { -webkit-transform: rotate(417deg); -moz-transform: rotate(417deg); -ms-transform: rotate(417deg); -o-transform: rotate(417deg); transform: rotate(417deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" x2="50" y1="20" y2="50"/> </g> <g class="hand minute-hand"> <line class="hand-outer" x1="50" x2="50" y1="12" y2="50"/> </g> <circle class="circle" cx="50" cy="50" r="3"/> <g class="hand second-hand"> <line x1="50" x2="50" y1="10" y2="65"/> <circle cx="50" cy="50" r="3"/> <circle cx="50" cy="65" r="2"/> </g> </g> </svg> ';
        bytes memory actualBytes = bytes(actualOutput);
        bytes memory expectedBytes = bytes(expectedOutput);
        assertEq(actualBytes.length, expectedBytes.length);
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    // render hands test
    function testFTankHands() public {
        string memory actualOutput = WatchScratchersLibrary._renderHands("0 0 2500 2500", "158.1", "309.7", "#0056A5", "#0056A5", "#0056A5", 150, 342, 57, WatchScratchersLibrary.HandTypes.F_TANK);
        // emit log(actualOutput);
        string memory expectedOutput = '<svg class="dial" viewBox="0 0 2500 2500" x="158.1" y="309.7"> <style>g, line, circle { --color-accent: #0056A5; --color-hand-outer: #0056A5; --color-hand-inner: #0056A5; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-hand-outer); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 4px; color: var(--color-hand-outer); } .hand-inner { stroke-width: 2px; color: var(--color-hand-inner); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(57deg); -moz-transform: rotate(57deg); -ms-transform: rotate(57deg); -o-transform: rotate(57deg); transform: rotate(57deg); } to { -webkit-transform: rotate(417deg); -moz-transform: rotate(417deg); -ms-transform: rotate(417deg); -o-transform: rotate(417deg); transform: rotate(417deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" x2="50" y1="30" y2="50"/> </g> <g class="hand minute-hand"> <line class="hand-outer" x1="50" x2="50" y1="20" y2="50"/> </g> <circle class="circle" cx="50" cy="50" r="3"/> </g> </svg> ';
        bytes memory actualBytes = bytes(actualOutput);
        bytes memory expectedBytes = bytes(expectedOutput);
        assertEq(actualBytes.length, expectedBytes.length);
        assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    }

    // function testDJ() public {
    //     string memory actualOutput = WatchScratchersLibrary._renderDJ();
    //     // emit log(actualOutput);
    //     string memory expectedOutput = '<svg width="600" height="600" viewBox="0 0 600 600" fill="none" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <rect width="600" height="600" fill="#FBF6E9" /> <svg x="155.15" y="100" width="499" height="683" viewBox="0 0 852 1166" xmlns="http://www.w3.org/2000/svg"> <rect x="77" y="125" width="37" height="45" fill="#B2B2B2"/> <rect x="343" y="125" width="37" height="45" fill="#B2B2B2"/> <rect x="289" y="19" width="41" height="119" fill="#B2B2B2"/> <rect x="132" y="20" width="44" height="119" fill="#B2B2B2"/> <rect x="195" y="20" width="79" height="119" fill="#EBEBEB"/> <rect transform="matrix(1 0 0 -1 77 563)" width="37" height="45" fill="#B2B2B2"/> <rect transform="matrix(1 0 0 -1 343 563)" width="37" height="45" fill="#B2B2B2"/> <rect transform="matrix(1 0 0 -1 289 669)" width="41" height="119" fill="#B2B2B2"/> <rect transform="matrix(1 0 0 -1 132 668)" width="44" height="119" fill="#B2B2B2"/> <rect transform="matrix(1 0 0 -1 195 668)" width="79" height="119" fill="#EBEBEB"/> <rect x="445" y="314" width="42" height="75" fill="#B2B2B2"/> <circle cx="229" cy="345" r="215" fill="#B2B2B2" stroke="#000" stroke-width="28"/> <circle cx="228.5" cy="344.5" r="174.5" fill="#F5F5F5" stroke="#000" stroke-width="28"/> <line x1="443" x2="499" y1="311" y2="311" stroke="#000" stroke-width="28"/> <line x1="485" x2="485" y1="317" y2="406" stroke="#000" stroke-width="28"/> <line x1="443" x2="482.2" y1="392" y2="392" stroke="#000" stroke-width="28"/> <line transform="matrix(-.07171 -.99743 -.99743 .07171 326 156)" x2="153.4" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line x1="54.553" x2="85.553" y1="219.1" y2="112.1" stroke="#000" stroke-width="28"/> <line transform="matrix(-.27828 -.9605 -.9605 .27828 390 223)" x2="111.4" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line x1="75.132" x2="118.13" y1="121.3" y2="112.3" stroke="#000" stroke-width="28"/> <line transform="matrix(-.97879 -.20486 -.20486 .97879 380 135)" x2="43.932" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line x1="118.04" x2="129.04" y1="155" y2="1.996" stroke="#000" stroke-width="28"/> <line x1="115" x2="343" y1="15" y2="15" stroke="#000" stroke-width="28"/> <line x1="185" x2="185" y1="25" y2="129.02" stroke="#000" stroke-width="28"/> <line x1="278" x2="278" y1="27" y2="131.02" stroke="#000" stroke-width="28"/> <line x1="132" x2="171.01" y1="98" y2="98" stroke="#000" stroke-width="28"/> <line x1="287" x2="326.01" y1="98" y2="98" stroke="#000" stroke-width="28"/> <line x1="190" x2="269" y1="75" y2="75" stroke="#000" stroke-width="28"/> <line x1="339.96" x2="328.96" y1="534" y2="687" stroke="#000" stroke-width="28"/> <line transform="matrix(.27828 .9605 .9605 -.27828 68 466)" x2="111.4" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line x1="403.45" x2="372.45" y1="469.9" y2="576.9" stroke="#000" stroke-width="28"/> <line transform="matrix(.97879 .20486 .20486 -.97879 78 554)" x2="43.932" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line x1="382.87" x2="339.87" y1="567.7" y2="576.7" stroke="#000" stroke-width="28"/> <line transform="matrix(.07171 .99743 .99743 -.07171 132 533)" x2="153.4" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line transform="matrix(1 0 0 -1 115 660)" x2="228" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line transform="matrix(0 -1 -1 0 171 664)" x2="104.02" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line transform="matrix(0 -1 -1 0 264 662)" x2="104.02" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line transform="matrix(1 0 0 -1 132 577)" x2="39.013" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line transform="matrix(1 0 0 -1 287 577)" x2="39.013" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <line transform="matrix(1 0 0 -1 190 600)" x2="79" y1="-14" y2="-14" stroke="#000" stroke-width="28"/> <rect transform="rotate(-32.703 147.18 219.72)" x="147.18" y="219.72" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="matrix(.84148 .54028 .54028 -.84148 146.38 469.44)" x="1.3818" y="-.3012" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="rotate(147.3 307.12 470.44)" x="307.12" y="470.44" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect x="224" y="459" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="matrix(-.84148 -.54028 -.54028 .84148 306.12 218.8)" x="-1.3818" y=".3012" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="rotate(-61.388 97.357 276.17)" x="97.357" y="276.17" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="matrix(.47888 .87788 .87788 -.47888 96.357 414.46)" x="1.3568" y=".39901" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="rotate(118.61 361.52 415.46)" x="361.52" y="415.46" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="rotate(-90 79 350.03)" x="79" y="350.03" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect transform="matrix(-.47888 -.87788 -.87788 .47888 360.52 275.17)" x="-1.3568" y="-.39901" width="10.034" height="35.72" fill="#EDEDED" stroke="#5C5F60" stroke-width="2"/> <rect x="308" y="314" width="79" height="62" rx="31" fill="#F9F8F8" stroke="#5C5F60" stroke-width="2"/> <path d="m210.21 205.19 18.288-11.991 18.288 11.991-6.941 19.28h-22.694l-6.941-19.28z" fill="#E3E3E3" stroke="#78797A" stroke-width="2"/> <path d="m243 227c0 2.628-1.499 5.104-4.119 6.963-2.617 1.857-6.284 3.037-10.381 3.037s-7.764-1.18-10.381-3.037c-2.62-1.859-4.119-4.335-4.119-6.963s1.499-5.104 4.119-6.963c2.617-1.857 6.284-3.037 10.381-3.037s7.764 1.18 10.381 3.037c2.62 1.859 4.119 4.335 4.119 6.963z" fill="#E3E3E3" stroke="#78797A" stroke-width="2"/> <path d="m235 229c0 2.565-2.69 5-6.5 5s-6.5-2.435-6.5-5 2.69-5 6.5-5 6.5 2.435 6.5 5z" fill="#fff" stroke="#66686A" stroke-width="2"/> </svg> <svg class="dial" viewBox="0 0 280 280" x="182" y="195"> <style>g, line, circle { --color-accent: #B2B2B2; --color-hand-outer: #B2B2B2; --color-hand-inner: #E8E8E8; -webkit-transform-origin: inherit; transform-origin: inherit; display: flex; align-items: center; justify-content: center; margin: 0; } .circle { color: var(--color-hand-outer); } .dial { width: 60vmin; height: 60vmin; fill: currentColor; -webkit-transform-origin: 50px 50px; transform-origin: 50px 50px; -webkit-animation-name: fade-in; animation-name: fade-in; -webkit-animation-duration: 500ms; animation-duration: 500ms; -webkit-animation-fill-mode: both; animation-fill-mode: both; } .dial line { stroke: currentColor; } .hand { transition: -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); transition: transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 200ms cubic-bezier(0.175, 0.885, 0.32, 1.275); } .hour-hand { animation: rotateHourHand 216000s linear infinite; } .hand-outer { stroke-width: 4px; color: var(--color-hand-outer); } .hand-inner { stroke-width: 2px; color: var(--color-hand-inner); } .minute-hand { animation: rotateMinuteHand 3600s linear infinite; } .second-hand { color: var(--color-accent); stroke-width: 2px; animation: rotateSecondHand 60s linear infinite; } @keyframes rotateSecondHand { from { -webkit-transform: rotate(150deg); -moz-transform: rotate(150deg); -ms-transform: rotate(150deg); -o-transform: rotate(150deg); transform: rotate(150deg); } to { -webkit-transform: rotate(510deg); -moz-transform: rotate(510deg); -ms-transform: rotate(510deg); -o-transform: rotate(510deg); transform: rotate(510deg); } } @keyframes rotateMinuteHand { from { -webkit-transform: rotate(342deg); -moz-transform: rotate(342deg); -ms-transform: rotate(342deg); -o-transform: rotate(342deg); transform: rotate(342deg); } to { -webkit-transform: rotate(702deg); -moz-transform: rotate(702deg); -ms-transform: rotate(702deg); -o-transform: rotate(702deg); transform: rotate(702deg); } } @keyframes rotateHourHand { from { -webkit-transform: rotate(60deg); -moz-transform: rotate(60deg); -ms-transform: rotate(60deg); -o-transform: rotate(60deg); transform: rotate(60deg); } to { -webkit-transform: rotate(420deg); -moz-transform: rotate(420deg); -ms-transform: rotate(420deg); -o-transform: rotate(420deg); transform: rotate(420deg); } } </style> <g> <g class="hand hour-hand"> <line class="hand-outer" x1="50" x2="50" y1="25" y2="60"/> <line class="hand-inner" x1="50" x2="50" y1="28" y2="40"/> </g> <g class="hand minute-hand"> <line class="hand-outer" x1="50" x2="50" y1="15" y2="60"/> <line class="hand-inner" x1="50" x2="50" y1="18" y2="40"/> </g> <circle class="circle" cx="50" cy="50" r="3"/> <g class="hand second-hand"> <line x1="50" x2="50" y1="10" y2="65"/> <circle cx="50" cy="50" r="3"/> </g> </g> </svg> </svg>';
    //     bytes memory actualBytes = bytes(actualOutput);
    //     bytes memory expectedBytes = bytes(expectedOutput);
    //     assertEq(actualBytes.length, expectedBytes.length);
    //     assertEq(keccak256(abi.encodePacked(actualOutput)), keccak256(abi.encodePacked(expectedOutput)));
    // }
}
